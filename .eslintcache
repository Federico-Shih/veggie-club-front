[{"/home/sh1ft/Desktop/veggie-club-front/src/index.js":"1","/home/sh1ft/Desktop/veggie-club-front/src/App.tsx":"2","/home/sh1ft/Desktop/veggie-club-front/src/theme.ts":"3","/home/sh1ft/Desktop/veggie-club-front/src/menu/menu.tsx":"4","/home/sh1ft/Desktop/veggie-club-front/src/landing.tsx":"5","/home/sh1ft/Desktop/veggie-club-front/src/menu/api.ts":"6","/home/sh1ft/Desktop/veggie-club-front/src/menu/types.ts":"7","/home/sh1ft/Desktop/veggie-club-front/src/menu/hooks.ts":"8","/home/sh1ft/Desktop/veggie-club-front/src/menu/menu.styles.tsx":"9","/home/sh1ft/Desktop/veggie-club-front/src/menu/menu.components.tsx":"10","/home/sh1ft/Desktop/veggie-club-front/src/menu/errors.ts":"11","/home/sh1ft/Desktop/veggie-club-front/src/landing.styles.tsx":"12","/home/sh1ft/Desktop/veggie-club-front/src/components/utilities.tsx":"13"},{"size":414,"mtime":1612552689980,"results":"14","hashOfConfig":"15"},{"size":781,"mtime":1612552689976,"results":"16","hashOfConfig":"15"},{"size":277,"mtime":1612552689984,"results":"17","hashOfConfig":"15"},{"size":31287,"mtime":1612581345117,"results":"18","hashOfConfig":"15"},{"size":7477,"mtime":1612581300837,"results":"19","hashOfConfig":"15"},{"size":5814,"mtime":1612624129712,"results":"20","hashOfConfig":"15"},{"size":805,"mtime":1612574544106,"results":"21","hashOfConfig":"15"},{"size":1344,"mtime":1612552689984,"results":"22","hashOfConfig":"15"},{"size":8626,"mtime":1612552689984,"results":"23","hashOfConfig":"15"},{"size":19817,"mtime":1612581323649,"results":"24","hashOfConfig":"15"},{"size":199,"mtime":1612552689984,"results":"25","hashOfConfig":"15"},{"size":3995,"mtime":1612552689984,"results":"26","hashOfConfig":"15"},{"size":974,"mtime":1612552689976,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"nyfiwp",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"/home/sh1ft/Desktop/veggie-club-front/src/index.js",[],[],"/home/sh1ft/Desktop/veggie-club-front/src/App.tsx",[],[],"/home/sh1ft/Desktop/veggie-club-front/src/theme.ts",[],"/home/sh1ft/Desktop/veggie-club-front/src/menu/menu.tsx",[],"/home/sh1ft/Desktop/veggie-club-front/src/landing.tsx",[],"/home/sh1ft/Desktop/veggie-club-front/src/menu/api.ts",["58","59"],"import axios from \"axios\";\nimport { Category, Day, Food } from \"./types\";\n\nconst serverURL = process.env.REACT_APP_API_URL || \"http://localhost:3000/\";\n\naxios.defaults.baseURL = serverURL;\n// axios.defaults.headers[\"Content-Type\"] = ;\n\naxios.defaults.withCredentials = true;\naxios.defaults.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n\nconst tinify = (image: string) => {\n  const imagePath = image.split(\".\");\n  return `${imagePath[0]}.tiny.${imagePath[1]}`;\n};\n\nexport const padImage = (imageEndpoint: string, tiny = false): string => {\n  return `${serverURL}${tiny ? tinify(imageEndpoint) : imageEndpoint}`;\n};\n\nconst addNameToBlob = (blob: Blob, name: string) =>\n  `${name}.${blob.type.split(\"/\")[1]}`;\n\nexport const login = async ({\n  user,\n  password,\n}: {\n  user: string;\n  password: string;\n}): Promise<boolean> => {\n  const params = new URLSearchParams();\n  params.append(\"username\", user);\n  params.append(\"password\", password);\n  const res = await axios.post(\"/login\", params);\n  return Promise.resolve(res.status === 200);\n};\n\nexport const getCategories = async (): Promise<Category[]> => {\n  const categories = await axios.get(\"/categories\");\n  const parsedCategories = categories.data.map(\n    (category: { name: string; image: string; _id?: string }) => {\n      const newCategory = {\n        name: category.name,\n        image: padImage(category.image, true),\n        id: category._id,\n      };\n      return newCategory;\n    }\n  );\n\n  return Promise.resolve(parsedCategories);\n};\n\nexport const getFoodsByDayAndCategory = async (\n  categoryId: string,\n  day?: Day\n): Promise<Food[]> => {\n  const res = await axios.get(\"/foods\", {\n    params: {\n      categoryId,\n      day,\n    },\n  });\n\n  const newFoods = res.data.foods.map(\n    (food: {\n      categoryId: string;\n      days: Day[];\n      description: string;\n      image: string;\n      name: string;\n      visible: boolean;\n      _id?: string;\n    }) => {\n      const newFood = {\n        ...food,\n        id: food._id,\n        image: padImage(food.image),\n      };\n      delete newFood._id;\n      return newFood;\n    }\n  );\n\n  return Promise.resolve(newFoods);\n};\n\nexport const createCategory = async (\n  categoryName: string,\n  image: string\n): Promise<Category> => {\n  const data = new FormData();\n\n  const imageData = await fetch(image);\n  const imageBlob = await imageData.blob();\n\n  data.append(\"name\", categoryName);\n  data.append(\"image\", imageBlob, addNameToBlob(imageBlob, categoryName));\n\n  const res = await axios.post(\"/category/add\", data);\n\n  const newCategory = {\n    id: res.data._id,\n    name: res.data.name,\n    image: padImage(res.data.image, true),\n  };\n  return Promise.resolve(newCategory);\n};\n\nexport const modifyCategory = async ({\n  name,\n  image,\n  id,\n}: {\n  name: string;\n  image?: string;\n  id: string;\n}): Promise<Category> => {\n  const data = new FormData();\n  if (image) {\n    const imageData = await fetch(image);\n    const imageBlob = await imageData.blob();\n    data.append(\"image\", imageBlob, addNameToBlob(imageBlob, name));\n  }\n  if (name) {\n    data.append(\"name\", name);\n  }\n  data.append(\"id\", id);\n  const res = await axios.patch(\"/category/edit\", data);\n  const editedCategory = {\n    image: padImage(res.data.image, true),\n    id: res.data._id,\n    name: res.data.name,\n  };\n\n  return Promise.resolve(editedCategory);\n};\n\nexport const createFood = async (\n  {\n    name,\n    description,\n    image,\n    days,\n    visible,\n  }: {\n    name: string;\n    description: string;\n    image: string;\n    days: Day[];\n    visible: boolean;\n  },\n  categoryId: string\n): Promise<Food> => {\n  const data = new FormData();\n  data.append(\"name\", name);\n  if (description) {\n    data.append(\"description\", description);\n  }\n  const imageData = await fetch(image);\n  const imageBlob = await imageData.blob();\n  data.append(\"image\", imageBlob, addNameToBlob(imageBlob, name));\n  data.append(\"days\", JSON.stringify(days));\n  data.append(\"categoryId\", categoryId);\n  data.append(\"visible\", JSON.stringify(visible));\n\n  const res = await axios.post(\"/food/add\", data);\n  const newFood = {\n    name: res.data.name,\n    days: res.data.days,\n    description: res.data.description,\n    image: padImage(res.data.image),\n    visible: res.data.visible,\n    id: res.data._id,\n  };\n\n  return Promise.resolve(newFood);\n};\n\nexport const modifyFood = async (\n  food: Food,\n  originalFood: Food\n): Promise<Food> => {\n  const data = new FormData();\n  if (food.name !== originalFood.name) {\n    data.append(\"name\", food.name);\n  }\n  if (food.description !== originalFood.description) {\n    data.append(\"description\", food.description);\n  }\n  if (food.image !== originalFood.image) {\n    const imageData = await fetch(food.image);\n    const imageBlob = await imageData.blob();\n    data.append(\"image\", imageBlob, addNameToBlob(imageBlob, food.name));\n  }\n  if (food.visible !== originalFood.visible) {\n    data.append(\"visible\", JSON.stringify(food.visible));\n  }\n  data.append(\"days\", JSON.stringify(food.days));\n  data.append(\"id\", food.id);\n\n  const res = await axios.patch(\"/food/edit\", data);\n  if (res.data) {\n    const { name, _id, image, description, visible, days } = res.data;\n    const modifiedFood = {\n      name,\n      id: _id,\n      image: padImage(image),\n      description,\n      visible,\n      days,\n    };\n    return Promise.resolve(modifiedFood);\n  }\n  throw new Error(\"Unknown error\");\n};\n\nexport const deleteFood = async (foodId: string): Promise<void> => {\n  const data = new URLSearchParams();\n  data.append(\"id\", foodId);\n  const res = await axios.delete(\"/food/delete\", { data });\n};\n\nexport const deleteCategory = async (categoryId: string): Promise<void> => {\n  const data = new URLSearchParams();\n  data.append(\"id\", categoryId);\n  const res = await axios.delete(\"/category/delete\", { data });\n};\n","/home/sh1ft/Desktop/veggie-club-front/src/menu/types.ts",[],"/home/sh1ft/Desktop/veggie-club-front/src/menu/hooks.ts",[],"/home/sh1ft/Desktop/veggie-club-front/src/menu/menu.styles.tsx",[],"/home/sh1ft/Desktop/veggie-club-front/src/menu/menu.components.tsx",[],"/home/sh1ft/Desktop/veggie-club-front/src/menu/errors.ts",[],"/home/sh1ft/Desktop/veggie-club-front/src/landing.styles.tsx",[],"/home/sh1ft/Desktop/veggie-club-front/src/components/utilities.tsx",[],[],{"ruleId":"60","severity":1,"message":"61","line":221,"column":9,"nodeType":"62","messageId":"63","endLine":221,"endColumn":12},{"ruleId":"60","severity":1,"message":"61","line":227,"column":9,"nodeType":"62","messageId":"63","endLine":227,"endColumn":12},"@typescript-eslint/no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar"]